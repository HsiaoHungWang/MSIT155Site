@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

@section Scripts{
    <script>
        // setTimeout(function () {
        //     console.log('A');
        //     setTimeout(function () {
        //         console.log('B');
        //         setTimeout(function () {
        //             console.log('C');
        //         }, 1000);
        //     }, 1000);           
        // }, 1000);

        function show(data){
            //建立Promise物件
            return new Promise((resolve, reject) => {
                //非同步程式碼
                //XMLHttpRequest、FileReader、setTimeout

                setTimeout(() => {
                    resolve(data);
                },1000)

                // if (true) {
                //     resolve("成功");
                // } else {
                //     reject("失敗");
                // }
            })
        }
     

        //使用Promise物件...
        //console.log(promise);
        // promise 
        //   .then(data=>console.log(`success:${data}`))
        //   .catch(err=>console.log(`error：${err}`))
        //   .finally(()=>console.log("end"))

       // show("A")
       //     .then(data => {
       //         console.log(data);
       //         return show("B");
       //     })
       //     .then(data => {
       //         console.log(data);
       //         return show("C");
       //     })
       //     .then(data => {
       //         console.log(data);
       //     })

       //IIFE 立即執行函式
       //(() => { })();
        //async await
        //用同步語法來實現非同步的程式碼
        (async() => {
            let data = await show("A");
            console.log(data);
            data = await show("B");
            console.log(data);
            data = await show("C");
            console.log(data);
        })();


       
      

    </script>
}
